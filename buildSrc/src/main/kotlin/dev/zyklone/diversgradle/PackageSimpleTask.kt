package dev.zyklone.diversgradle

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.Internal
import org.gradle.api.tasks.TaskAction
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream
import javax.inject.Inject
import kotlin.io.path.ExperimentalPathApi
import kotlin.io.path.createDirectories
import kotlin.io.path.exists
import kotlin.io.path.isDirectory
import kotlin.io.path.name
import kotlin.io.path.notExists
import kotlin.io.path.readBytes
import kotlin.io.path.relativeTo
import kotlin.io.path.walk

abstract class PackageSimpleTask @Inject constructor(@Internal val config: MainConfig): DefaultTask() {
    init {
        this.group = "helldivers"
    }

    @OptIn(ExperimentalPathApi::class)
    @TaskAction
    fun pack() {
        val project = this.config.project
        val logger = project.logger
        val root = project.layout.projectDirectory.asFile.toPath()
        val dest = project.layout.buildDirectory.dir("dist").get()
        val version = project.version

        dest.asFile.let {
            if (!it.exists())
                it.mkdirs()
        }

        for ((name, config) in config.packages) {
            logger.info("Packaging $name")
            val dir = root.resolve(config.dir)
            val target = dest.file("$name-$version.zip").asFile.outputStream()
            val out = ZipOutputStream(target)
            out.setComment(buildString {
                appendLine("Generated by DiversGradle")
                appendLine("Name: $name (from ${project.name})")
                config.main.author?.let {
                    appendLine("Mod Author: $it")
                }
                appendLine("Mod Version: $version")
            })

            // copy files
            for (path in dir.walk()) {
                if (!path.isDirectory()) {
                    out.putNextEntry(ZipEntry(path.relativeTo(dir).toString()))
                    out.write(path.readBytes())
                    out.closeEntry()
                }
            }

            out.close()
            target.close()
        }
    }
}
